datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  role          Role      @default(USER)
  orders        Order[]
  Address       Address?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  ADMIN
  CHEF
  ACCOUNTANT
  USER
}

model Address {
  id               String   @id @default(cuid())
  cafe_name        String
  order_maker_name String
  address          String
  phone            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Category {
  id          String                @id @default(cuid())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  products    Product[]
  translation CategoryTranslation[]
}

model CategoryTranslation {
  id         String   @id @default(cuid())
  name       String
  language   String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  image       String
  best_seller Boolean  @default(false)
  sizes       Size[]
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])

  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  translation ProductTranslation[]
}

model ProductTranslation {
  id          String  @id @default(cuid())
  language    String
  name        String
  description String
  productId   String
  product     Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id        String   @id @default(cuid())
  price     Float
  size      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id                 String         @id @default(cuid())
  cafe_name          String
  order_maker_name   String
  total              Float
  status             OrderStatus
  payment_status     PaymentStatus
  payment_id         String?
  address            String
  phone              String
  products           ProductOrder[]
  special_items      SpecialItem[]
  order_receipt_date DateTime

  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOrder {
  id             String   @id @default(cuid())
  name_ar        String
  name_en        String
  description_ar String
  description_en String
  size           String
  price          Float
  image          String
  quantity       Int
  total          Float
  note           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  orderId        String?
  Order          Order?   @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum OrderStatus {
  FAILED
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model SpecialItem {
  id          Int    @id @default(autoincrement())
  description String
  quantity    Int

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}
