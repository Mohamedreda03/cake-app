datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  role          Role      @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  ADMIN
  WRITER
  USER
}

model Category {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  size        String
  price       Float
  image       String
  best_seller Boolean
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id               String         @id @default(cuid())
  cafe_name        String
  order_maker_name String
  total            Int
  status           OrderStatus
  payment_status   PaymentStatus
  payment_id       String?
  address          String
  phone            String
  products         ProductOrder[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model ProductOrder {
  id          String   @id @default(cuid())
  name        String
  description String
  size        String
  price       Float
  image       String
  quantity    Int
  total       Int
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderId     String?
  Order       Order?   @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  PENDING
  PAID
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model SpecialOrder {
  id               String        @id @default(cuid())
  cafe_name        String
  order_maker_name String
  status           OrderStatus
  payment_status   PaymentStatus @default(PENDING)
  address          String
  phone            String
  description      String
  quantity         Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}
